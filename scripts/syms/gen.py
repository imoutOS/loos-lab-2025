#! /usr/bin/env python3
# vim:fenc=utf-8
#
# Copyright © 2025 Tiger1218 <tiger1218@foxmail.com>
#
# Distributed under terms of the GNU AGPLv3 license.

#!/usr/bin/env python3
import re
import sys

def parse_syscalls(input_file):
    pattern = re.compile(r'#define\s+SYS_(\w+)\s+(\d+)')
    syscalls = {}

    with open(input_file, 'r') as f:
        for line in f:
            match = pattern.match(line.strip())
            if match:
                name = match.group(1)
                nr = int(match.group(2))
                syscalls[nr] = name

    return syscalls

def generate_c_code(syscalls, output_file):
    max_nr = max(syscalls.keys()) if syscalls else 0
    with open(output_file, 'w') as f:
        f.write("/* Auto-generated by gen_syscall_table.py */\n")
        f.write("const char *syscall_names[] = {\n")
        
        # 确保连续填充，缺失项填充 NULL
        for nr in range(max_nr + 1):
            name = syscalls.get(nr, "unknown")  # 或者填充 NULL
            f.write(f'    [{nr}] = "{name}",\n')
        
        f.write("};\n\n")
        f.write(f"const int syscall_table_size = {max_nr + 1};\n")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <input_file> <output_file>")
        sys.exit(1)

    syscalls = parse_syscalls(sys.argv[1])
    generate_c_code(syscalls, sys.argv[2])
